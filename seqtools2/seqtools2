#!/usr/bin/env python

import os
import sys
import argparse
import logging
import click
import logging
from signal import signal, SIGPIPE, SIG_DFL

signal(SIGPIPE, SIG_DFL) 


def run_tools():
    '''Seqtools2: Sequence Manipulation and Statistics

       USAGE: seqtools2 <TOOL>

       Current Tools:

        basic_fasta_stats
        format_fasta
        chunk_fasta
        chunk_fastq
        detect_chimeric_alignments
        fastx_converter
        filter_fasta_by_length
        get_fasta_by_id
        get_fastq_by_id
        subset_fastq

       Please run `seqtools2 <TOOL> --help` for individual usage
    '''
    if not len(sys.argv) > 1:
        print(run_tools.__doc__)
        sys.exit(1)
    tool = sys.argv[1].lower()  # get tool
    sys.argv = [tool] + sys.argv[2:]  # make usage for applicaiton correct
    if tool == '--help' or tool =='-h':
        print(run_tools.__doc__)
        sys.exit(1)
    if tool == 'basic_fasta_stats':
        from tools import basic_fasta_stats
        basic_fasta_stats.main()
    if tool == 'format_fasta':
        from tools import format_fasta
        format_fasta.main()
    if tool == 'chunk_fastq':
        from tools import chunk_fastq
        chunk_fastq.main()
    if tool == 'chunk_fasta':
        from tools import chunk_fasta
        chunk_fasta.main()
    if tool == 'fastx_converter':
        from tools import fastx_converter
        fastx_converter.main()
    if tool == 'filter_fasta_by_length':
        from tools import filter_fasta_by_length
        filter_fasta_by_length.main()
    if tool == 'get_fasta_by_id':
        from tools import get_fasta_by_id
        get_fasta_by_id.main()
    if tool == 'get_fastq_by_id':
        from tools import get_fastq_by_id
        get_fastq_by_id.main()
    if tool == 'subset_fastq':
        from tools import subset_fastq
        subset_fastq.main()
 

if __name__ == '__main__':
    run_tools() 
